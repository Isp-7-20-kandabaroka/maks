import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7065423366:AAFekBFw-3I0_HFNbIyeHt9uQ1en2OwlLfI'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API —Ç–æ–∫–µ–Ω –æ—Ç BotFather
Password = '419'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

async def on_startup(dispatcher):
    global Password
    try:
        with open("password.txt", "r") as file:
            Password = file.read().strip()
    except FileNotFoundError:
        print("–§–∞–π–ª –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–∞—á–∞—Ç—å")
    await bot.send_message(5429082466, "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=keyboard)

def save_events_to_file():
    with open("events_data.json", "w", encoding='utf-8') as file:
        json.dump(events, file, ensure_ascii=False, indent=4)

def load_events_from_file():
    try:
        with open("events_data.json", "r", encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_password(password):
    with open("password.txt", "w") as file:
        file.write(password)

async def on_startup(dispatcher):
    global Password
    try:
        with open("password.txt", "r") as file:
            Password = file.read().strip()
    except FileNotFoundError:
        print("–§–∞–π–ª –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–∞—á–∞—Ç—å")
    await bot.send_message(5429082466, "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=keyboard)


events = load_events_from_file()

def save_password(password):
    with open("password.txt", "w") as file:
        file.write(password)

class EventStates(StatesGroup):
    Start = State()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    EnterPassword = State()  # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    EventAction = State()  # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    AddEvent = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    RemoveEvent = State()  # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    RemovingMore = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    ChangePassword = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    MaxParticipants = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ


class ParticipantStates(StatesGroup):
    AwaitingStart = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–∂–∏–¥–∞—é—â–µ–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    Start = State()
    ChoosingEvent = State()  # –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
    EnteringName = State()  # –í–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    UnsubscribeEvent = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è


@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å", state="*")
async def process_start_button(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

@dp.callback_query_handler(lambda c: c.data == 'back_to_start')
async def go_back_inline(callback_query: types.CallbackQuery):
    await callback_query.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.")
    await EventStates.Start.set()
    await callback_query.message.edit_reply_markup()  # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

@dp.message_handler(commands=['start'], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    if state is not None:
        await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]
    if message.chat.type == "private":
        buttons.insert(1, "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏")
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await EventStates.Start.set()


@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", state="*")
async def show_my_events(message: types.Message):
    user_id = message.from_user.id
    my_events_info = []

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∏—â–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for event_name, participants in events.items():
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        names_registered = [participant['name'] for participant in participants if participant["id"] == user_id]

        if names_registered:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ–¥ –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
            names_str = ", ".join([f"üë§ {name}" for name in names_registered])  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–∞–∂–¥–æ–º—É –∏–º–µ–Ω–∏
            my_events_info.append(f"üìÖ {event_name} (–∫–∞–∫ {names_str})")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –∏–º–µ–Ω–∞–º–∏
    if my_events_info:
        response_message = "üìò –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n" + "\n\n".join(my_events_info)
    else:
        response_message = "üì≠ –í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."

    await message.answer(response_message)



@dp.message_handler(lambda message: message.text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", state="*")
async def unsubscribe_from_event(message: types.Message, state: FSMContext):
    await ParticipantStates.UnsubscribeEvent.set()
    user_id = message.from_user.id
    keyboard = types.InlineKeyboardMarkup()

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∏—â–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for event_name, participants in events.items():
        for participant in participants:
            if participant["id"] == user_id:
                callback_data = f"unsubscribe:{event_name}:{participant['name']}"
                keyboard.add(types.InlineKeyboardButton(f"{event_name} (–∫–∞–∫ {participant['name']})", callback_data=callback_data))

    if keyboard.inline_keyboard:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –∏–º—è, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        await EventStates.Start.set()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ



@dp.callback_query_handler(lambda c: c.data.startswith('unsubscribe:'), state="*")
async def process_unsubscribe(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"Received callback query for unsubscribe: {callback_query.data}")
    try:
        _, event_name, participant_name = callback_query.data.split(':', 2)
        user_id = callback_query.from_user.id
        logging.info(f"Event name: {event_name}, Participant name: {participant_name}")
        participants = events.get(event_name, [])
        logging.info(f"Current participants: {participants}")

        new_participants = [participant for participant in participants if not (participant["id"] == user_id and participant["name"] == participant_name)]

        if len(participants) > len(new_participants):
            events[event_name] = new_participants
            save_events_to_file()
            logging.info(f"Successfully unsubscribed {user_id} from {event_name}")
            await callback_query.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç '{event_name}' –∫–∞–∫ '{participant_name}'.")
            await callback_query.message.edit_text("–í–∞—à–∞ –æ—Ç–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        else:
            logging.warning(f"User {user_id} not found in participants for {event_name}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã.")
    except Exception as e:
        logging.error(f"Error in process_unsubscribe: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

    await state.finish()
    await EventStates.Start.set()


@dp.message_handler(state=ParticipantStates.EnteringName)
async def participant_name_entered(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    event_name = user_data.get('chosen_event')
    participant_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participant_name = message.text  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    if event_name not in events:
        events[event_name] = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —Å ID –∏ –∏–º–µ–Ω–µ–º
    participant_info = {"id": participant_id, "name": participant_name}
    events[event_name].append(participant_info)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ

    await message.reply(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}'. –ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                        reply_markup=continue_or_not_keyboard())
    await ParticipantStates.ChoosingEvent.set()

    async def remove_participant_from_event(event_name, user_id):
        if event_name in events:
            # –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
            events[event_name] = [participant for participant in events[event_name] if participant["id"] != user_id]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞"
def continue_or_not_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue"),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data in ['continue', 'cancel'], state=ParticipantStates.ChoosingEvent)
async def continue_or_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    if callback_query.data == 'continue':
        await cmd_start(callback_query.message, state)
    else:
        await state.finish()
        await callback_query.message.reply("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    @dp.message_handler(lambda message: message.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", state=EventStates.Start)
    async def show_participants_btn(message: types.Message):
        if not events:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return

        response_message = "üìå –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n"
        for event_name, participants in events.items():
            response_message += f"\nüìù {event_name}:\n"
            if participants:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                participant_names = [participant["name"] for participant in participants]
                response_message += "\n".join([f"üë§ {name}" for name in participant_names]) + "\n"
            else:
                response_message += "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            response_message += "-----------------\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é

        await message.answer(response_message)
        save_events_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@dp.message_handler(lambda message: message.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", state=EventStates.Start)
async def join_event(message: types.Message):
    if not events:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for event in events.keys():
        keyboard.add(event)
    keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=keyboard)
    await ParticipantStates.ChoosingEvent.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
@dp.message_handler(state=ParticipantStates.ChoosingEvent)
async def process_event_choice(message: types.Message, state: FSMContext):
    if message.text not in events and message.text != "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await cmd_start(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        return
    await state.update_data(chosen_event=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:", reply_markup=types.ReplyKeyboardRemove())
    await ParticipantStates.EnteringName.set()
    save_events_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"
@dp.message_handler(lambda message: message.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏", state=EventStates.Start)
async def manage_events(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:")
    await EventStates.EnterPassword.set()

@dp.message_handler(state=EventStates.EnterPassword)
async def process_password(message: types.Message, state: FSMContext):
    if message.text == Password:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="add_event"))
        keyboard.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="remove_event"))
        keyboard.add(types.InlineKeyboardButton("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="change_password"))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        await EventStates.EventAction.set()
    else:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        await state.finish()
        await cmd_start(message, state)

@dp.callback_query_handler(lambda c: c.data == 'change_password', state=EventStates.EventAction)
async def prompt_new_password(callback_query: types.CallbackQuery):
    await EventStates.ChangePassword.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")

@dp.message_handler(state=EventStates.ChangePassword)
async def change_password(message: types.Message, state: FSMContext):
    global Password  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    Password = message.text  # –û–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å
    save_password(Password)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Ñ–∞–π–ª
    await message.reply("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
    await state.finish()
    await cmd_start(message, state)  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏" –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
@dp.callback_query_handler(lambda c: c.data == 'exit_to_main_menu', state="*")
async def exit_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await EventStates.Start.set()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.callback_query_handler(lambda c: c.data == 'add_event', state=EventStates.EventAction)
async def process_add_event(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await EventStates.AddEvent.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state=EventStates.AddEvent)
async def add_event(message: types.Message, state: FSMContext):
    events[message.text] = []
    save_events_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await message.reply(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    save_events_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    await message.reply("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?", reply_markup=continue_adding_keyboard())
    await EventStates.Start.set()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    @dp.message_handler(state=ParticipantStates.EnteringName)
    async def participant_name_entered(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        event_name = user_data.get('chosen_event')
        participant_id = message.from_user.id
        participant_name = message.text

        if event_name not in events:
            events[event_name] = []

        participant_info = {"id": participant_id, "name": participant_name}
        events[event_name].append(participant_info)
        save_events_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        await message.reply(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}'.")
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
def continue_adding_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –î–∞", callback_data="add_more_event"),
                 InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no_more_event"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@dp.callback_query_handler(lambda c: c.data in ['add_more_event', 'no_more_event'], state="*")
async def continue_adding_event(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    if callback_query.data == 'add_more_event':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        await EventStates.AddEvent.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await cmd_start(callback_query.message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.callback_query_handler(lambda c: c.data == 'remove_event', state=EventStates.EventAction)
async def process_remove_event(callback_query: types.CallbackQuery):
    if not events:
        await bot.send_message(callback_query.from_user.id, "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for event_name in events.keys():
        keyboard.add(event_name)
    keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await EventStates.RemoveEvent.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state=EventStates.RemoveEvent)
async def remove_event(message: types.Message, state: FSMContext):
    event_name = message.text
    if event_name not in events and event_name != "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    elif event_name == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await cmd_start(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        return
    del events[event_name]
    await message.reply(f"‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}' —É–¥–∞–ª–µ–Ω–æ.")
    save_events_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    @dp.callback_query_handler(lambda c: c.data in ['remove_more_event', 'no_more_event'], state="*")
    async def continue_removing_event(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        if callback_query.data == 'remove_more_event':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            for event_name in events.keys():
                keyboard.add(event_name)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")
            await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                   reply_markup=keyboard)
            await EventStates.RemoveEvent.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            save_events_to_file()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç —É–¥–∞–ª—è—Ç—å –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await cmd_start(callback_query.message, state)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
def continue_removing_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –î–∞", callback_data="remove_more_event"),
                 InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no_more_event"))
    return keyboard

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)